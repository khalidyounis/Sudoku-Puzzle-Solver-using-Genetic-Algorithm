/*

Sudoku Puzzle Solver using Genetic Algorithm
Developed by Group A
University of Liverpool
Master of Computer Science
CSCK502 Reasoning and Intelligent Systems October 2022

MIT License

Copyright (c) 2022 Khalid Younis
Copyright (c) 2022 Jose Roberto Mora Martinez
Copyright (c) 2022 Ghafer Khan

 */
/*

Sudoku Puzzle Solver using Genetic Algorithm
Developed by Group A
University of Liverpool
Master of Computer Science
CSCK502 Reasoning and Intelligent Systems October 2022

MIT License

Copyright (c) 2022 Khalid Younis
Copyright (c) 2022 Jose Roberto Mora Martinez
Copyright (c) 2022 Ghafer Khan

 */

package sudoku.in.genetic.algorithm;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Properties;
import java.util.Random;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;
import javax.swing.plaf.ColorUIResource;

/**
 *
 * @author khalid.kareem
 */
public class SudokuGeneticAlgorithmUI extends javax.swing.JFrame {

    /**
     * Creates new form SudokuGeneticAlgorithmUI
     */
    int xmouse;
    int ymouse;
    Properties prop = new Properties();
    static StringBuilder puzzleWord = new StringBuilder();
    int[] initialPlacement = new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    public SudokuGeneticAlgorithmUI() throws IOException {
        initComponents();

        //Center the window
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension frameSize = getSize();
        int x = (screenSize.width - frameSize.width) / 2;
        int y = (screenSize.height - frameSize.height) / 2;
        setLocation(x, y);

        //Set the application icon
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/app_icon.png")));

        //Style the dropdowns
        samplesList.setUI(ColorArrowUI.createUI(samplesList));
        wordsList.setUI(ColorArrowUI.createUI(wordsList));

        //Read the settings values from the app.config file
        String fileName = "app.config";
        try ( FileInputStream fis = new FileInputStream(fileName)) {
            prop.load(fis);
        } catch (FileNotFoundException ex) {

        } catch (IOException ex) {

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        one_two = new javax.swing.JTextField();
        three_one = new javax.swing.JTextField();
        one_three = new javax.swing.JTextField();
        three_two = new javax.swing.JTextField();
        one_four = new javax.swing.JTextField();
        three_three = new javax.swing.JTextField();
        two_two = new javax.swing.JTextField();
        three_four = new javax.swing.JTextField();
        two_three = new javax.swing.JTextField();
        four_one = new javax.swing.JTextField();
        two_four = new javax.swing.JTextField();
        four_two = new javax.swing.JTextField();
        two_one = new javax.swing.JTextField();
        four_three = new javax.swing.JTextField();
        four_four = new javax.swing.JTextField();
        one_one = new javax.swing.JTextField();
        minButton = new javax.swing.JLabel();
        exitButton = new javax.swing.JLabel();
        avoutButton = new javax.swing.JLabel();
        solveButton = new com.k33ptoo.components.KButton();
        kGradientPanel2 = new com.k33ptoo.components.KGradientPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        solverLog = new javax.swing.JTextArea();
        copyLogButton = new javax.swing.JLabel();
        clearLogButton = new javax.swing.JLabel();
        populationSizeInput = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        maxIterationsInput = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        samplesButton = new com.k33ptoo.components.KButton();
        updatePopSzButton = new javax.swing.JLabel();
        updateMaxIterButton = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        samplesList = new javax.swing.JComboBox<>();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        wordsList = new javax.swing.JComboBox<>();
        homeButton = new javax.swing.JLabel();
        resetButton = new com.k33ptoo.components.KButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(236, 239, 241));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(50, 71, 79), 2));
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel1MouseDragged(evt);
            }
        });
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel1MousePressed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(50, 71, 79));

        one_two.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        one_two.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        one_two.setBorder(null);
        one_two.setOpaque(true);
        one_two.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                one_twoFocusLost(evt);
            }
        });
        one_two.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                one_twoKeyTyped(evt);
            }
        });

        three_one.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        three_one.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        three_one.setBorder(null);
        three_one.setOpaque(true);
        three_one.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                three_oneFocusLost(evt);
            }
        });
        three_one.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                three_oneActionPerformed(evt);
            }
        });
        three_one.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                three_oneKeyTyped(evt);
            }
        });

        one_three.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        one_three.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        one_three.setBorder(null);
        one_three.setOpaque(true);
        one_three.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                one_threeFocusLost(evt);
            }
        });
        one_three.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                one_threeKeyTyped(evt);
            }
        });

        three_two.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        three_two.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        three_two.setBorder(null);
        three_two.setOpaque(true);
        three_two.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                three_twoFocusLost(evt);
            }
        });
        three_two.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                three_twoKeyTyped(evt);
            }
        });

        one_four.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        one_four.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        one_four.setBorder(null);
        one_four.setOpaque(true);
        one_four.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                one_fourFocusLost(evt);
            }
        });
        one_four.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                one_fourKeyTyped(evt);
            }
        });

        three_three.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        three_three.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        three_three.setBorder(null);
        three_three.setOpaque(true);
        three_three.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                three_threeFocusLost(evt);
            }
        });
        three_three.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                three_threeKeyTyped(evt);
            }
        });

        two_two.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        two_two.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        two_two.setBorder(null);
        two_two.setOpaque(true);
        two_two.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                two_twoFocusLost(evt);
            }
        });
        two_two.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                two_twoKeyTyped(evt);
            }
        });

        three_four.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        three_four.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        three_four.setBorder(null);
        three_four.setOpaque(true);
        three_four.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                three_fourFocusLost(evt);
            }
        });
        three_four.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                three_fourKeyTyped(evt);
            }
        });

        two_three.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        two_three.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        two_three.setBorder(null);
        two_three.setOpaque(true);
        two_three.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                two_threeFocusLost(evt);
            }
        });
        two_three.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                two_threeKeyTyped(evt);
            }
        });

        four_one.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        four_one.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        four_one.setBorder(null);
        four_one.setOpaque(true);
        four_one.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                four_oneFocusLost(evt);
            }
        });
        four_one.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                four_oneKeyTyped(evt);
            }
        });

        two_four.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        two_four.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        two_four.setBorder(null);
        two_four.setOpaque(true);
        two_four.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                two_fourFocusLost(evt);
            }
        });
        two_four.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                two_fourKeyTyped(evt);
            }
        });

        four_two.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        four_two.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        four_two.setBorder(null);
        four_two.setOpaque(true);
        four_two.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                four_twoFocusLost(evt);
            }
        });
        four_two.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                four_twoKeyTyped(evt);
            }
        });

        two_one.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        two_one.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        two_one.setBorder(null);
        two_one.setOpaque(true);
        two_one.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                two_oneFocusLost(evt);
            }
        });
        two_one.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                two_oneKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                two_oneKeyTyped(evt);
            }
        });

        four_three.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        four_three.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        four_three.setBorder(null);
        four_three.setOpaque(true);
        four_three.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                four_threeFocusLost(evt);
            }
        });
        four_three.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                four_threeKeyTyped(evt);
            }
        });

        four_four.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        four_four.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        four_four.setBorder(null);
        four_four.setOpaque(true);
        four_four.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                four_fourFocusLost(evt);
            }
        });
        four_four.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                four_fourKeyTyped(evt);
            }
        });

        one_one.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        one_one.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        one_one.setBorder(null);
        one_one.setOpaque(true);
        one_one.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                one_oneFocusLost(evt);
            }
        });
        one_one.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                one_oneMouseExited(evt);
            }
        });
        one_one.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                one_oneCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        one_one.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                one_oneKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                one_oneKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                one_oneKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(four_one, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(four_two, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(four_three, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(four_four, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(three_one, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(three_two, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(three_three, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(three_four, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(two_one, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(two_two, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(two_three, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(two_four, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(one_one, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(one_two, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(one_three, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(one_four, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(4, 4, 4))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(one_one, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(one_two, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(one_three, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(one_four, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(two_one, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(two_two, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(two_three, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(two_four, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(three_one, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(three_two, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(three_three, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(three_four, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(four_one, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(four_two, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(four_three, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(four_four, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        minButton.setBackground(new java.awt.Color(50, 71, 79));
        minButton.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        minButton.setForeground(new java.awt.Color(255, 255, 255));
        minButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        minButton.setText("＿");
        minButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        minButton.setOpaque(true);
        minButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minButtonMouseClicked(evt);
            }
        });

        exitButton.setBackground(new java.awt.Color(204, 0, 0));
        exitButton.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        exitButton.setForeground(new java.awt.Color(255, 255, 255));
        exitButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        exitButton.setText("✕");
        exitButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exitButton.setOpaque(true);
        exitButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitButtonMouseClicked(evt);
            }
        });

        avoutButton.setBackground(new java.awt.Color(53, 179, 216));
        avoutButton.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        avoutButton.setForeground(new java.awt.Color(255, 255, 255));
        avoutButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        avoutButton.setText("!");
        avoutButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        avoutButton.setOpaque(true);
        avoutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                avoutButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                avoutButtonMouseEntered(evt);
            }
        });

        solveButton.setText("Solve");
        solveButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        solveButton.setFont(new java.awt.Font("SansSerif", 0, 22)); // NOI18N
        solveButton.setkBackGroundColor(new java.awt.Color(246, 170, 13));
        solveButton.setkEndColor(new java.awt.Color(232, 166, 26));
        solveButton.setkHoverEndColor(new java.awt.Color(232, 166, 26));
        solveButton.setkHoverForeGround(new java.awt.Color(255, 255, 255));
        solveButton.setkHoverStartColor(new java.awt.Color(232, 166, 26));
        solveButton.setkSelectedColor(new java.awt.Color(232, 166, 26));
        solveButton.setkStartColor(new java.awt.Color(246, 170, 13));
        solveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                solveButtonMouseClicked(evt);
            }
        });

        kGradientPanel2.setkBorderRadius(0);
        kGradientPanel2.setkEndColor(new java.awt.Color(135, 88, 56));
        kGradientPanel2.setkStartColor(new java.awt.Color(135, 88, 56));

        jLabel1.setFont(new java.awt.Font("SansSerif", 0, 20)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Soduku Puzzle Solver - Genetic Algorithm");

        javax.swing.GroupLayout kGradientPanel2Layout = new javax.swing.GroupLayout(kGradientPanel2);
        kGradientPanel2.setLayout(kGradientPanel2Layout);
        kGradientPanel2Layout.setHorizontalGroup(
            kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        kGradientPanel2Layout.setVerticalGroup(
            kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        solverLog.setEditable(false);
        solverLog.setBackground(new java.awt.Color(50, 71, 79));
        solverLog.setColumns(20);
        solverLog.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        solverLog.setForeground(new java.awt.Color(255, 255, 255));
        solverLog.setLineWrap(true);
        solverLog.setRows(5);
        solverLog.setWrapStyleWord(true);
        solverLog.setBorder(null);
        jScrollPane1.setViewportView(solverLog);

        copyLogButton.setBackground(new java.awt.Color(53, 179, 216));
        copyLogButton.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        copyLogButton.setForeground(new java.awt.Color(255, 255, 255));
        copyLogButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        copyLogButton.setText("Copy");
        copyLogButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(8, 8, 8, 8));
        copyLogButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        copyLogButton.setOpaque(true);
        copyLogButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                copyLogButtonMouseClicked(evt);
            }
        });

        clearLogButton.setBackground(new java.awt.Color(194, 54, 22));
        clearLogButton.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        clearLogButton.setForeground(new java.awt.Color(255, 255, 255));
        clearLogButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        clearLogButton.setText("Clear");
        clearLogButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(8, 8, 8, 8));
        clearLogButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        clearLogButton.setOpaque(true);
        clearLogButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearLogButtonMouseClicked(evt);
            }
        });

        populationSizeInput.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        Border rounded = new LineBorder(new Color(240, 168, 59), 1, true);
        Border empty = new EmptyBorder(0, 5, 0, 0);
        Border border = new CompoundBorder(rounded, empty);
        populationSizeInput.setBorder(border);
        populationSizeInput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                populationSizeInputMouseClicked(evt);
            }
        });
        populationSizeInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                populationSizeInputActionPerformed(evt);
            }
        });
        populationSizeInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                populationSizeInputKeyTyped(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(50, 71, 79));
        jLabel2.setText("Population Size");

        jLabel3.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(50, 71, 79));
        jLabel3.setText("Maximum Iterations");

        maxIterationsInput.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        maxIterationsInput.setBorder(border);
        maxIterationsInput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                maxIterationsInputMouseClicked(evt);
            }
        });
        maxIterationsInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxIterationsInputActionPerformed(evt);
            }
        });
        maxIterationsInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                maxIterationsInputKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(15, 82, 186));
        jLabel4.setText("Process Log");

        samplesButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        samplesButton.setText("Test");
        samplesButton.setFont(new java.awt.Font("SansSerif", 0, 22)); // NOI18N
        samplesButton.setkBackGroundColor(new java.awt.Color(53, 179, 216));
        samplesButton.setkEndColor(new java.awt.Color(74, 167, 194));
        samplesButton.setkHoverEndColor(new java.awt.Color(53, 179, 216));
        samplesButton.setkHoverForeGround(new java.awt.Color(255, 255, 255));
        samplesButton.setkHoverStartColor(new java.awt.Color(53, 179, 216));
        samplesButton.setkSelectedColor(new java.awt.Color(53, 179, 216));
        samplesButton.setkStartColor(new java.awt.Color(74, 167, 194));
        samplesButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                samplesButtonMouseClicked(evt);
            }
        });

        updatePopSzButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        updatePopSzButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/refresh-32.png"))); // NOI18N
        updatePopSzButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updatePopSzButtonMouseClicked(evt);
            }
        });

        updateMaxIterButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        updateMaxIterButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/refresh-32.png"))); // NOI18N
        updateMaxIterButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateMaxIterButtonMouseClicked(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(15, 82, 186));
        jLabel7.setText("Application Settings");

        jSeparator1.setBackground(new java.awt.Color(15, 82, 186));
        jSeparator1.setForeground(new java.awt.Color(15, 82, 186));
        jSeparator1.setOpaque(true);

        samplesList.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        samplesList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(240, 168, 59)));
        samplesList.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        samplesList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                samplesListItemStateChanged(evt);
            }
        });
        samplesList.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                samplesListPropertyChange(evt);
            }
        });

        jSeparator2.setBackground(new java.awt.Color(15, 82, 186));
        jSeparator2.setForeground(new java.awt.Color(15, 82, 186));
        jSeparator2.setOpaque(true);

        jLabel8.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(15, 82, 186));
        jLabel8.setText("Test Samples");

        jLabel5.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(50, 71, 79));
        jLabel5.setText("Puzzle Word");

        jLabel6.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(50, 71, 79));
        jLabel6.setText("Select a sample");

        wordsList.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        wordsList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(240, 168, 59)));
        wordsList.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        wordsList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                wordsListItemStateChanged(evt);
            }
        });
        wordsList.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                wordsListPropertyChange(evt);
            }
        });

        homeButton.setBackground(new java.awt.Color(113, 88, 226));
        homeButton.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        homeButton.setForeground(new java.awt.Color(255, 255, 255));
        homeButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        homeButton.setText("🏠");
        homeButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        homeButton.setOpaque(true);
        homeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                homeButtonMouseClicked(evt);
            }
        });

        resetButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        resetButton.setText("Reset");
        resetButton.setFont(new java.awt.Font("SansSerif", 0, 22)); // NOI18N
        resetButton.setkBackGroundColor(new java.awt.Color(204, 0, 0));
        resetButton.setkEndColor(new java.awt.Color(204, 0, 0));
        resetButton.setkHoverEndColor(new java.awt.Color(178, 25, 25));
        resetButton.setkHoverForeGround(new java.awt.Color(255, 255, 255));
        resetButton.setkHoverStartColor(new java.awt.Color(178, 25, 25));
        resetButton.setkSelectedColor(new java.awt.Color(178, 25, 25));
        resetButton.setkStartColor(new java.awt.Color(204, 0, 0));
        resetButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resetButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(homeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(avoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(minButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(populationSizeInput, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updatePopSzButton)
                        .addGap(40, 40, 40)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(maxIterationsInput, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateMaxIterButton))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(copyLogButton)
                            .addGap(10, 10, 10)
                            .addComponent(clearLogButton))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 599, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel7)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(solveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(samplesList, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(samplesButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(wordsList, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(43, 43, 43)))
                .addGap(15, 15, 15))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(avoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(homeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(kGradientPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(samplesList, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wordsList, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(solveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(samplesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(updatePopSzButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(populationSizeInput, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(maxIterationsInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateMaxIterButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(clearLogButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(copyLogButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 760));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void three_oneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_three_oneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_three_oneActionPerformed

    private void minButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minButtonMouseClicked
        //Minimize the window
        setState(1);
    }//GEN-LAST:event_minButtonMouseClicked

    private void exitButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitButtonMouseClicked
        //close the application
        System.exit(0);
    }//GEN-LAST:event_exitButtonMouseClicked

    private void avoutButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_avoutButtonMouseClicked
        new aboutUI().setVisible(true);
    }//GEN-LAST:event_avoutButtonMouseClicked

    private void jPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        setLocation(x - this.xmouse, y - this.ymouse);
    }//GEN-LAST:event_jPanel1MouseDragged

    private void jPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MousePressed
        this.xmouse = evt.getX();
        this.ymouse = evt.getY();
    }//GEN-LAST:event_jPanel1MousePressed

    private void solveButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_solveButtonMouseClicked
        Thread solvePuzzle = new Thread() {
            @Override
            public void run() {
                if (checkGrid() < 4 || checkGrid() > 4 || checkDuplicate(puzzleWord.toString()) || puzzleWord.toString().length() < 4 || puzzleWord.toString().length() > 4 && setWordUI.userInput == false) {
                    Notification panel = new Notification(SudokuGeneticAlgorithmUI.this, Notification.Type.WARNING, Notification.Location.CENTER, "Please enter four non duplicated letters in the puzzle grid.");
                    panel.showNotification();
                    clearGrid();
                } else {
                    setPlacement();
                    solverLog.setText("");
                    disableControls();
                    solvePuzzle();
                }
            }
        };
        solvePuzzle.start();
    }//GEN-LAST:event_solveButtonMouseClicked

    private void copyLogButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_copyLogButtonMouseClicked
        Toolkit.getDefaultToolkit()
                .getSystemClipboard()
                .setContents(
                        new StringSelection(solverLog.getText()),
                        null
                );
    }//GEN-LAST:event_copyLogButtonMouseClicked

    private void clearLogButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearLogButtonMouseClicked
        solverLog.setText("");
    }//GEN-LAST:event_clearLogButtonMouseClicked

    private void populationSizeInputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_populationSizeInputMouseClicked

    }//GEN-LAST:event_populationSizeInputMouseClicked

    private void populationSizeInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_populationSizeInputActionPerformed

    }//GEN-LAST:event_populationSizeInputActionPerformed

    private void populationSizeInputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_populationSizeInputKeyTyped

    }//GEN-LAST:event_populationSizeInputKeyTyped

    private void maxIterationsInputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_maxIterationsInputMouseClicked

    }//GEN-LAST:event_maxIterationsInputMouseClicked

    private void maxIterationsInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxIterationsInputActionPerformed

    }//GEN-LAST:event_maxIterationsInputActionPerformed

    private void maxIterationsInputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_maxIterationsInputKeyTyped

    }//GEN-LAST:event_maxIterationsInputKeyTyped

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {

            Samples.getSamples();
            addOptions();
            if (!setWordUI.puzzleWord.isEmpty()) {
                one_one.setText(Character.toString(setWordUI.puzzleWord.charAt(0)));
                two_one.setText(Character.toString(setWordUI.puzzleWord.charAt(1)));
                three_one.setText(Character.toString(setWordUI.puzzleWord.charAt(2)));
                four_one.setText(Character.toString(setWordUI.puzzleWord.charAt(3)));
                puzzleWord = string2SB(setWordUI.puzzleWord);
            }
            populationSizeInput.setText(prop.getProperty("app.populationSize"));
            maxIterationsInput.setText(prop.getProperty("app.maxIterations"));
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SudokuGeneticAlgorithmUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(SudokuGeneticAlgorithmUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(SudokuGeneticAlgorithmUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowOpened

    private void two_oneKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_two_oneKeyTyped
        if (two_one.getText().length() >= 1) {
            evt.consume();
        }
    }//GEN-LAST:event_two_oneKeyTyped

    private void three_oneKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_three_oneKeyTyped
        if (three_one.getText().length() >= 1) {
            evt.consume();
        }
    }//GEN-LAST:event_three_oneKeyTyped

    private void four_oneKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_four_oneKeyTyped
        if (four_one.getText().length() >= 1) {
            evt.consume();
        }
    }//GEN-LAST:event_four_oneKeyTyped

    private void one_twoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_one_twoKeyTyped
        if (one_two.getText().length() >= 1) {
            evt.consume();
        }
    }//GEN-LAST:event_one_twoKeyTyped

    private void two_twoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_two_twoKeyTyped
        if (two_two.getText().length() >= 1) {
            evt.consume();
        }
    }//GEN-LAST:event_two_twoKeyTyped

    private void three_twoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_three_twoKeyTyped
        if (three_two.getText().length() >= 1) {
            evt.consume();
        }
    }//GEN-LAST:event_three_twoKeyTyped

    private void four_twoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_four_twoKeyTyped
        if (four_two.getText().length() >= 1) {
            evt.consume();
        }
    }//GEN-LAST:event_four_twoKeyTyped

    private void one_threeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_one_threeKeyTyped
        if (one_three.getText().length() >= 1) {
            evt.consume();
        }
    }//GEN-LAST:event_one_threeKeyTyped

    private void two_threeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_two_threeKeyTyped
        if (two_three.getText().length() >= 1) {
            evt.consume();
        }
    }//GEN-LAST:event_two_threeKeyTyped

    private void three_threeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_three_threeKeyTyped
        if (three_three.getText().length() >= 1) {
            evt.consume();
        }
    }//GEN-LAST:event_three_threeKeyTyped

    private void four_threeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_four_threeKeyTyped
        if (four_three.getText().length() >= 1) {
            evt.consume();
        }
    }//GEN-LAST:event_four_threeKeyTyped

    private void one_fourKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_one_fourKeyTyped
        if (one_four.getText().length() >= 1) {
            evt.consume();
        }
    }//GEN-LAST:event_one_fourKeyTyped

    private void two_fourKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_two_fourKeyTyped
        if (two_four.getText().length() >= 1) {
            evt.consume();
        }
    }//GEN-LAST:event_two_fourKeyTyped

    private void three_fourKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_three_fourKeyTyped
        if (three_four.getText().length() >= 1) {
            evt.consume();
        }
    }//GEN-LAST:event_three_fourKeyTyped

    private void four_fourKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_four_fourKeyTyped
        if (four_four.getText().length() >= 1) {
            evt.consume();
        }
    }//GEN-LAST:event_four_fourKeyTyped

    private void samplesButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_samplesButtonMouseClicked
        Thread solveSamples = new Thread() {
            @Override
            public void run() {
                if (wordsList.getSelectedItem().toString().length() < 4 || wordsList.getSelectedItem().toString().length() > 4 || "---".equals(samplesList.getSelectedItem().toString()) || "---".equals(wordsList.getSelectedItem().toString())) {
                    Notification panel = new Notification(SudokuGeneticAlgorithmUI.this, Notification.Type.WARNING, Notification.Location.CENTER, "The puzzle cannot be solved as the number of letters is not euqal to 4");
                    panel.showNotification();
                } else {
                    solverLog.setText("");
                    disableControls();
                    solveSamples(Samples.vars.get(samplesList.getSelectedItem().toString()), wordsList.getSelectedItem().toString());
                }
            }
        };
        solveSamples.start();
    }//GEN-LAST:event_samplesButtonMouseClicked

    private void updatePopSzButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updatePopSzButtonMouseClicked
        try {
            changeProperty("app.config", "app.populationSize", populationSizeInput.getText());
        } catch (IOException ex) {
            Logger.getLogger(SudokuGeneticAlgorithmUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_updatePopSzButtonMouseClicked

    private void updateMaxIterButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateMaxIterButtonMouseClicked
        try {
            changeProperty("app.config", "app.maxIterations", populationSizeInput.getText());
        } catch (IOException ex) {
            Logger.getLogger(SudokuGeneticAlgorithmUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_updateMaxIterButtonMouseClicked

    private void samplesListItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_samplesListItemStateChanged
        clearGrid();
        if (samplesList.getItemCount() > 0 && !"---".equals(samplesList.getSelectedItem().toString()) && !"---".equals(wordsList.getSelectedItem().toString())) {
            visualizeSamples(Samples.vars.get(samplesList.getSelectedItem().toString()), wordsList.getSelectedItem().toString());
            solveButton.setVisible(false);
        }
    }//GEN-LAST:event_samplesListItemStateChanged

    private void samplesListPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_samplesListPropertyChange

    }//GEN-LAST:event_samplesListPropertyChange

    private void wordsListItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_wordsListItemStateChanged
        clearGrid();
        if (wordsList.getItemCount() > 0 && !"---".equals(samplesList.getSelectedItem().toString()) && !"---".equals(wordsList.getSelectedItem().toString())) {
            visualizeSamples(Samples.vars.get(samplesList.getSelectedItem().toString()), wordsList.getSelectedItem().toString());
            solveButton.setVisible(false);
        }
    }//GEN-LAST:event_wordsListItemStateChanged

    private void wordsListPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_wordsListPropertyChange

    }//GEN-LAST:event_wordsListPropertyChange

    private void two_oneKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_two_oneKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_two_oneKeyPressed

    private void two_oneFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_two_oneFocusLost
        if (!two_one.getText().isEmpty() && puzzleWord.length() < 4) {
            puzzleWord.append(two_one.getText());
            two_one.setBackground(new Color(151, 212, 230));
        }
    }//GEN-LAST:event_two_oneFocusLost

    private void three_oneFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_three_oneFocusLost
        if (!three_one.getText().isEmpty() && puzzleWord.length() < 4) {
            puzzleWord.append(three_one.getText());
            three_one.setBackground(new Color(151, 212, 230));
        }
    }//GEN-LAST:event_three_oneFocusLost

    private void four_oneFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_four_oneFocusLost
        if (!four_one.getText().isEmpty() && puzzleWord.length() < 4) {
            puzzleWord.append(four_one.getText());
            four_one.setBackground(new Color(151, 212, 230));
        }
    }//GEN-LAST:event_four_oneFocusLost

    private void one_twoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_one_twoFocusLost
        if (!one_two.getText().isEmpty() && puzzleWord.length() < 4) {
            puzzleWord.append(one_two.getText());
            one_two.setBackground(new Color(151, 212, 230));
        }
    }//GEN-LAST:event_one_twoFocusLost

    private void two_twoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_two_twoFocusLost
        if (!two_two.getText().isEmpty() && puzzleWord.length() < 4) {
            puzzleWord.append(two_two.getText());
            two_two.setBackground(new Color(151, 212, 230));
        }
    }//GEN-LAST:event_two_twoFocusLost

    private void three_twoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_three_twoFocusLost
        if (!three_two.getText().isEmpty() && puzzleWord.length() < 4) {
            puzzleWord.append(three_two.getText());
            three_two.setBackground(new Color(151, 212, 230));
        }
    }//GEN-LAST:event_three_twoFocusLost

    private void four_twoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_four_twoFocusLost
        if (!four_two.getText().isEmpty() && puzzleWord.length() < 4) {
            puzzleWord.append(four_two.getText());
            four_two.setBackground(new Color(151, 212, 230));
        }
    }//GEN-LAST:event_four_twoFocusLost

    private void one_threeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_one_threeFocusLost
        if (!one_three.getText().isEmpty() && puzzleWord.length() < 4) {
            puzzleWord.append(one_three.getText());
            one_three.setBackground(new Color(151, 212, 230));
        }
    }//GEN-LAST:event_one_threeFocusLost

    private void two_threeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_two_threeFocusLost
        if (!two_three.getText().isEmpty() && puzzleWord.length() < 4) {
            puzzleWord.append(two_three.getText());
            two_three.setBackground(new Color(151, 212, 230));
        }
    }//GEN-LAST:event_two_threeFocusLost

    private void three_threeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_three_threeFocusLost
        if (!three_three.getText().isEmpty() && puzzleWord.length() < 4) {
            puzzleWord.append(three_three.getText());
            three_three.setBackground(new Color(151, 212, 230));
        }
    }//GEN-LAST:event_three_threeFocusLost

    private void four_threeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_four_threeFocusLost
        if (!four_three.getText().isEmpty() && puzzleWord.length() < 4) {
            puzzleWord.append(four_three.getText());
            four_three.setBackground(new Color(151, 212, 230));
        }
    }//GEN-LAST:event_four_threeFocusLost

    private void one_fourFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_one_fourFocusLost
        if (!one_four.getText().isEmpty() && puzzleWord.length() < 4) {
            puzzleWord.append(one_four.getText());
            one_four.setBackground(new Color(151, 212, 230));
        }
    }//GEN-LAST:event_one_fourFocusLost

    private void two_fourFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_two_fourFocusLost
        if (!two_four.getText().isEmpty() && puzzleWord.length() < 4) {
            puzzleWord.append(two_four.getText());
            two_four.setBackground(new Color(151, 212, 230));
        }
    }//GEN-LAST:event_two_fourFocusLost

    private void three_fourFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_three_fourFocusLost
        if (!three_four.getText().isEmpty() && puzzleWord.length() < 4) {
            puzzleWord.append(three_four.getText());
            three_four.setBackground(new Color(151, 212, 230));
        }
    }//GEN-LAST:event_three_fourFocusLost

    private void four_fourFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_four_fourFocusLost
        if (!four_four.getText().isEmpty() && puzzleWord.length() < 4) {
            puzzleWord.append(four_four.getText());
            four_four.setBackground(new Color(151, 212, 230));
        }
    }//GEN-LAST:event_four_fourFocusLost

    private void homeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeButtonMouseClicked
        try {
            dispose();
            new setWordUI().setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(SudokuGeneticAlgorithmUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_homeButtonMouseClicked

    private void avoutButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_avoutButtonMouseEntered

    }//GEN-LAST:event_avoutButtonMouseEntered

    private void resetButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resetButtonMouseClicked
        clearGrid();
    }//GEN-LAST:event_resetButtonMouseClicked

    private void one_oneKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_one_oneKeyTyped
        if (one_one.getText().length() >= 1) {
            evt.consume();
        }
    }//GEN-LAST:event_one_oneKeyTyped

    private void one_oneKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_one_oneKeyReleased

    }//GEN-LAST:event_one_oneKeyReleased

    private void one_oneKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_one_oneKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_one_oneKeyPressed

    private void one_oneCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_one_oneCaretPositionChanged

    }//GEN-LAST:event_one_oneCaretPositionChanged

    private void one_oneMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_one_oneMouseExited

    }//GEN-LAST:event_one_oneMouseExited

    private void one_oneFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_one_oneFocusLost
        if (!one_one.getText().isEmpty() && puzzleWord.length() < 4) {
            puzzleWord.append(one_one.getText());
            one_one.setBackground(new Color(151, 212, 230));
        }
    }//GEN-LAST:event_one_oneFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                UIManager.put("JTextField.background", new ColorUIResource(new Color(255, 255, 255)));
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                new SudokuGeneticAlgorithmUI().setVisible(true);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(SudokuGeneticAlgorithmUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                Logger.getLogger(SudokuGeneticAlgorithmUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(SudokuGeneticAlgorithmUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (UnsupportedLookAndFeelException ex) {
                Logger.getLogger(SudokuGeneticAlgorithmUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(SudokuGeneticAlgorithmUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel avoutButton;
    private javax.swing.JLabel clearLogButton;
    private javax.swing.JLabel copyLogButton;
    private javax.swing.JLabel exitButton;
    private javax.swing.JTextField four_four;
    private javax.swing.JTextField four_one;
    private javax.swing.JTextField four_three;
    private javax.swing.JTextField four_two;
    private javax.swing.JLabel homeButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private com.k33ptoo.components.KGradientPanel kGradientPanel2;
    public static javax.swing.JTextField maxIterationsInput;
    private javax.swing.JLabel minButton;
    private javax.swing.JTextField one_four;
    private javax.swing.JTextField one_one;
    private javax.swing.JTextField one_three;
    private javax.swing.JTextField one_two;
    public static javax.swing.JTextField populationSizeInput;
    private com.k33ptoo.components.KButton resetButton;
    private com.k33ptoo.components.KButton samplesButton;
    public static javax.swing.JComboBox<String> samplesList;
    private com.k33ptoo.components.KButton solveButton;
    private static javax.swing.JTextArea solverLog;
    private javax.swing.JTextField three_four;
    private javax.swing.JTextField three_one;
    private javax.swing.JTextField three_three;
    private javax.swing.JTextField three_two;
    private javax.swing.JTextField two_four;
    private javax.swing.JTextField two_one;
    private javax.swing.JTextField two_three;
    private javax.swing.JTextField two_two;
    private javax.swing.JLabel updateMaxIterButton;
    private javax.swing.JLabel updatePopSzButton;
    public static javax.swing.JComboBox<String> wordsList;
    // End of variables declaration//GEN-END:variables

    //Solve Sudoku Puzzle entered by the user
    public void solvePuzzle() {

        // Calculate the elapsed time to solve the puzzle
        long startTime = System.currentTimeMillis();

        // Create a new Random object
        Random random = new Random();

        // Read the population size and maximum number of iterations from the app.config file
        int populationSize = Integer.parseInt(populationSizeInput.getText());
        int maxIterations = Integer.parseInt(maxIterationsInput.getText());

        // Initialize the iteration counter
        int iteration = 0, populationCount = 0;

        // Set the initial genes for the Sudoku puzzle
        Sudoku.setInitialGene(initialPlacement);

        // Create a new Sudoku puzzle using the initial genes
        Sudoku currentSudoku = new Sudoku(GeneticOperators.initialize(Sudoku.getInitialGene().clone()));

        // Repeat until the fitness value is 0 or the iteration count reaches the maximum
        while (currentSudoku.getFitnessValue() != 0 && iteration < maxIterations) {
            populationCount++;
            // Print the current Sudoku puzzle and iteration count
            solverLog.append("\n[Population " + populationCount + "]\n\nCurrent: " + mapping(currentSudoku.toString())
            );

            // Create a new population of Sudoku puzzles
            Vector<Sudoku> population = new Vector<>();
            for (int i = 0; i < populationSize; i++) {
                population.add(new Sudoku(currentSudoku.getGene().clone()));
            }
            // Perform mutation or crossover on each member of the population
            for (int i = 0; i < population.size(); i++) {
                if (random.nextBoolean()) {
                    population.get(i).mutation();
                } else {
                    population.get(i).crossover(population.get(random.nextInt(population.size())));
                }
            }
            // Select the next Sudoku puzzle using the best or roulette selection method
            if (random.nextBoolean()) {
                currentSudoku = Sudoku.bestSelection(population);
            } else {
                currentSudoku = Sudoku.rouletteSelection(population);
            }

            solverLog.setCaretPosition(solverLog.getDocument().getLength());
        }

        String goal = mapping(currentSudoku.toString());
        one_one.setText(Character.toString(goal.charAt(0)));
        one_two.setText(Character.toString(goal.charAt(1)));
        one_three.setText(Character.toString(goal.charAt(2)));
        one_four.setText(Character.toString(goal.charAt(3)));
        two_one.setText(Character.toString(goal.charAt(4)));
        two_two.setText(Character.toString(goal.charAt(5)));
        two_three.setText(Character.toString(goal.charAt(6)));
        two_four.setText(Character.toString(goal.charAt(7)));
        three_one.setText(Character.toString(goal.charAt(8)));
        three_two.setText(Character.toString(goal.charAt(9)));
        three_three.setText(Character.toString(goal.charAt(10)));
        three_four.setText(Character.toString(goal.charAt(11)));
        four_one.setText(Character.toString(goal.charAt(12)));
        four_two.setText(Character.toString(goal.charAt(13)));
        four_three.setText(Character.toString(goal.charAt(14)));
        four_four.setText(Character.toString(goal.charAt(15)));
        solverLog.append("\n[Population " + (populationCount + 1) + "]\n\nGoal: " + mapping(currentSudoku.toString()));
        Notification panel = new Notification(SudokuGeneticAlgorithmUI.this, Notification.Type.SUCCESS, Notification.Location.CENTER, "The puzzle has been solved.");
        panel.showNotification();
        enableControls();
        long estimatedTime = System.currentTimeMillis() - startTime;
        solverLog.append("\n\nElapsed time: " + estimatedTime + " milli seconds");
        solverLog.setCaretPosition(solverLog.getDocument().getLength());

    }

    //Solve Sudoku Puzzle samples in Samples.java file
    public void solveSamples(int[] sample, String dictionary) {

        // Calculate the elapsed time to solve the puzzle
        long startTime = System.currentTimeMillis();
        // Create a new Random object
        Random random = new Random();

        // Read the population size and maximum number of iterations from the app.config file
        int populationSize = Integer.parseInt(populationSizeInput.getText());
        int maxIterations = Integer.parseInt(maxIterationsInput.getText());

        // Initialize the iteration counter
        int iteration = 0, populationCount = 0;

        // Set the initial genes for the Sudoku puzzle
        Sudoku.setInitialGene(sample);

        // Create a new Sudoku puzzle using the initial genes
        Sudoku currentSudoku = new Sudoku(GeneticOperators.initialize(Sudoku.getInitialGene().clone()));

        // Repeat until the fitness value is 0 or the iteration count reaches the maximum
        while (currentSudoku.getFitnessValue() != 0 && iteration < maxIterations) {
            populationCount++;
            // Print the current Sudoku puzzle and iteration count
            solverLog.append("\n[Population " + populationCount + "]\n\nCurrent: " + sampleMapping(currentSudoku.toString(), dictionary)
            );

            // Create a new population of Sudoku puzzles
            Vector<Sudoku> population = new Vector<>();
            for (int i = 0; i < populationSize; i++) {
                population.add(new Sudoku(currentSudoku.getGene().clone()));
            }
            // Perform mutation or crossover on each member of the population
            for (int i = 0; i < population.size(); i++) {
                if (random.nextBoolean()) {
                    population.get(i).mutation();
                } else {
                    population.get(i).crossover(population.get(random.nextInt(population.size())));
                }
            }
            // Select the next Sudoku puzzle using the best or roulette selection method
            if (random.nextBoolean()) {
                currentSudoku = Sudoku.bestSelection(population);
            } else {
                currentSudoku = Sudoku.rouletteSelection(population);
            }
            solverLog.setCaretPosition(solverLog.getDocument().getLength());
        }

        String goal = sampleMapping(currentSudoku.toString(), dictionary);
        one_one.setText(Character.toString(goal.charAt(0)));
        one_two.setText(Character.toString(goal.charAt(1)));
        one_three.setText(Character.toString(goal.charAt(2)));
        one_four.setText(Character.toString(goal.charAt(3)));
        two_one.setText(Character.toString(goal.charAt(4)));
        two_two.setText(Character.toString(goal.charAt(5)));
        two_three.setText(Character.toString(goal.charAt(6)));
        two_four.setText(Character.toString(goal.charAt(7)));
        three_one.setText(Character.toString(goal.charAt(8)));
        three_two.setText(Character.toString(goal.charAt(9)));
        three_three.setText(Character.toString(goal.charAt(10)));
        three_four.setText(Character.toString(goal.charAt(11)));
        four_one.setText(Character.toString(goal.charAt(12)));
        four_two.setText(Character.toString(goal.charAt(13)));
        four_three.setText(Character.toString(goal.charAt(14)));
        four_four.setText(Character.toString(goal.charAt(15)));
        solverLog.append("\n[Population " + (populationCount + 1) + "]\n\nGoal: " + sampleMapping(currentSudoku.toString(), dictionary));

        Notification panel = new Notification(SudokuGeneticAlgorithmUI.this, Notification.Type.SUCCESS, Notification.Location.CENTER, "The puzzle has been solved.");
        panel.showNotification();
        enableControls();

        //Calculate the elapsed time to solve the puzzle
        long estimatedTime = System.currentTimeMillis() - startTime;
        solverLog.append("\n\nElapsed time: " + estimatedTime + " milli seconds");
        solverLog.setCaretPosition(solverLog.getDocument().getLength());

    }

    //Mapping letters entered by the user
    public String mapping(String words) {

        String puzzleDict = puzzleWord.toString();
        String letter_1 = Character.toString(puzzleDict.charAt(0));
        String letter_2 = Character.toString(puzzleDict.charAt(1));
        String letter_3 = Character.toString(puzzleDict.charAt(2));
        String letter_4 = Character.toString(puzzleDict.charAt(3));
        // Declare a two-dimensional array called replacements that stores pairs of strings
        String[][] replacements = {{"1", letter_1},
        {"2", letter_2}, {"3", letter_3}, {"4", letter_4}};

        // Replace the numbers in the words string with the corresponding letters
        String strOutput = words;
        for (String[] replacement : replacements) {
            strOutput = strOutput.replace(replacement[0], replacement[1]);
        }

        // Return the resulting string
        return strOutput;
    }

    //Mapping the letters in the defined word in the Samples.java file
    public String sampleMapping(String words, String dictionary) {

        String letter_1 = Character.toString(dictionary.charAt(0));
        String letter_2 = Character.toString(dictionary.charAt(1));
        String letter_3 = Character.toString(dictionary.charAt(2));
        String letter_4 = Character.toString(dictionary.charAt(3));

        // Declare a two-dimensional array called replacements that stores pairs of strings
        String[][] replacements = {{"1", letter_1},
        {"2", letter_2}, {"3", letter_3}, {"4", letter_4}};

        // Replace the numbers in the words string with the corresponding letters
        String strOutput = words;
        for (String[] replacement : replacements) {
            strOutput = strOutput.replace(replacement[0], replacement[1]);
        }

        // Return the resulting string
        return strOutput;
    }

    // Enable controls and Sudoku grid
    public void enableControls() {
        solveButton.setEnabled(true);
        samplesButton.setEnabled(true);
        solveButton.setVisible(true);
        resetButton.setEnabled(true);
        resetButton.setVisible(true);
        one_one.setEnabled(true);
        one_two.setEnabled(true);
        one_three.setEnabled(true);
        one_four.setEnabled(true);
        two_one.setEnabled(true);
        two_two.setEnabled(true);
        two_three.setEnabled(true);
        two_four.setEnabled(true);
        three_one.setEnabled(true);
        three_two.setEnabled(true);
        three_three.setEnabled(true);
        three_four.setEnabled(true);
        four_one.setEnabled(true);
        four_two.setEnabled(true);
        four_three.setEnabled(true);
        four_four.setEnabled(true);
    }

    //Disable controls and Sudoku grid
    public void disableControls() {
        solveButton.setEnabled(false);
        samplesButton.setEnabled(false);
        resetButton.setEnabled(false);
        solveButton.setVisible(false);
        resetButton.setVisible(false);
        one_one.setEnabled(false);
        one_two.setEnabled(false);
        one_three.setEnabled(false);
        one_four.setEnabled(false);
        two_one.setEnabled(false);
        two_two.setEnabled(false);
        two_three.setEnabled(false);
        two_four.setEnabled(false);
        three_one.setEnabled(false);
        three_two.setEnabled(false);
        three_three.setEnabled(false);
        three_four.setEnabled(false);
        four_one.setEnabled(false);
        four_two.setEnabled(false);
        four_three.setEnabled(false);
        four_four.setEnabled(false);
    }

    //Reset Sudoku grid
    public void clearGrid() {
        one_one.setText("");
        one_one.setBackground(new Color(255, 255, 255));
        one_two.setText("");
        one_two.setBackground(new Color(255, 255, 255));
        one_three.setText("");
        one_three.setBackground(new Color(255, 255, 255));
        one_four.setText("");
        one_four.setBackground(new Color(255, 255, 255));
        two_one.setText("");
        two_one.setBackground(new Color(255, 255, 255));
        two_two.setText("");
        two_two.setBackground(new Color(255, 255, 255));
        two_three.setText("");
        two_three.setBackground(new Color(255, 255, 255));
        two_four.setText("");
        two_four.setBackground(new Color(255, 255, 255));
        three_one.setText("");
        three_one.setBackground(new Color(255, 255, 255));
        three_two.setText("");
        three_two.setBackground(new Color(255, 255, 255));
        three_three.setText("");
        three_three.setBackground(new Color(255, 255, 255));
        three_four.setText("");
        three_four.setBackground(new Color(255, 255, 255));
        four_one.setText("");
        four_one.setBackground(new Color(255, 255, 255));
        four_two.setText("");
        four_two.setBackground(new Color(255, 255, 255));
        four_three.setText("");
        four_three.setBackground(new Color(255, 255, 255));
        four_four.setText("");
        four_four.setBackground(new Color(255, 255, 255));
        puzzleWord.setLength(0);
        solveButton.setVisible(true);
        initialPlacement = new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    }

    //Check if the user entered the correct number of characters in the Sudoku grid
    public int checkGrid() {

        int score = 0;
        if (!one_one.getText().isEmpty()) {
            score += 1;
        }
        if (!one_two.getText().isEmpty()) {
            score += 1;
        }
        if (!one_three.getText().isEmpty()) {
            score += 1;
        }
        if (!one_four.getText().isEmpty()) {
            score += 1;
        }
        if (!two_one.getText().isEmpty()) {
            score += 1;
        }
        if (!two_two.getText().isEmpty()) {
            score += 1;
        }
        if (!two_three.getText().isEmpty()) {
            score += 1;
        }
        if (!two_four.getText().isEmpty()) {
            score += 1;
        }
        if (!three_one.getText().isEmpty()) {
            score += 1;
        }
        if (!three_two.getText().isEmpty()) {
            score += 1;
        }
        if (!three_three.getText().isEmpty()) {
            score += 1;
        }
        if (!three_four.getText().isEmpty()) {
            score = score + 1;
        }
        if (!four_one.getText().isEmpty()) {
            score += 1;
        }
        if (!four_two.getText().isEmpty()) {
            score += 1;
        }
        if (!four_three.getText().isEmpty()) {
            score += 1;
        }
        if (!four_four.getText().isEmpty()) {
            score += 1;
        }
        return score;
    }

    //Update config.app file properties
    public void changeProperty(String filename, String key, String value) throws IOException {
        Properties prop = new Properties();
        prop.load(new FileInputStream(filename));
        prop.setProperty(key, value);
        prop.store(new FileOutputStream(filename), "Soduku Puzzle Solver - Genetic Algorithm Applications\nUniversity of Liverpool\nDeveloped by Group A");
        Notification panel = new Notification(SudokuGeneticAlgorithmUI.this, Notification.Type.SUCCESS, Notification.Location.CENTER, "The settings has been updated.");
        panel.showNotification();
    }

    //Fetch the Samples and puzzle words dictionary from the Samples.java and add them to both dropdowns
    public static void addOptions()
            throws ClassNotFoundException, SQLException, IOException {
        samplesList.setModel(new DefaultComboBoxModel(Samples.samplesList));
        samplesList.insertItemAt("---", 0);
        samplesList.setSelectedIndex(0);
        wordsList.setModel(new DefaultComboBoxModel(Samples.wordsList));
        wordsList.insertItemAt("---", 0);
        wordsList.setSelectedIndex(0);
    }

    //Check the duplicated characters in the text
    public static boolean checkDuplicate(String s) {
        for (int i = 0; i < (s.length() - 1); i++) {
            for (int j = i + 1; j < s.length(); j++) {
                if (s.charAt(i) == s.charAt(j)) {
                    return true;
                }
            }
        }
        return false;
    }

    //Initialize the placement array based on the user's input
    public void setPlacement() {
        int initialPlace = 0;
        if (!one_one.getText().isEmpty()) {
            initialPlace += 1;
            initialPlacement[0] = initialPlace;
        }
        if (!one_two.getText().isEmpty()) {
            initialPlace += 1;
            initialPlacement[1] = initialPlace;
        }
        if (!one_three.getText().isEmpty()) {
            initialPlace += 1;
            initialPlacement[2] = initialPlace;
        }
        if (!one_four.getText().isEmpty()) {
            initialPlace += 1;
            initialPlacement[3] = initialPlace;
        }
        if (!two_one.getText().isEmpty()) {
            initialPlace += 1;
            initialPlacement[4] = initialPlace;
        }
        if (!two_two.getText().isEmpty()) {
            initialPlace += 1;
            initialPlacement[5] = initialPlace;
        }
        if (!two_three.getText().isEmpty()) {
            initialPlace += 1;
            initialPlacement[6] = initialPlace;
        }
        if (!two_four.getText().isEmpty()) {
            initialPlace += 1;
            initialPlacement[7] = initialPlace;
        }
        if (!three_one.getText().isEmpty()) {
            initialPlace += 1;
            initialPlacement[8] = initialPlace;
        }
        if (!three_two.getText().isEmpty()) {
            initialPlace += 1;
            initialPlacement[9] = initialPlace;
        }
        if (!three_three.getText().isEmpty()) {
            initialPlace += 1;
            initialPlacement[10] = initialPlace;
        }
        if (!three_four.getText().isEmpty()) {
            initialPlace += 1;
            initialPlacement[11] = initialPlace;
        }
        if (!four_one.getText().isEmpty()) {
            initialPlace += 1;
            initialPlacement[12] = initialPlace;
        }
        if (!four_two.getText().isEmpty()) {
            initialPlace += 1;
            initialPlacement[13] = initialPlace;
        }
        if (!four_three.getText().isEmpty()) {
            initialPlace += 1;
            initialPlacement[14] = initialPlace;
        }
        if (!four_four.getText().isEmpty()) {
            initialPlace += 1;
            initialPlacement[15] = initialPlace;
        }
    }

    //Visualize the placement of the samples to the Sudoku grid
    public void visualizeSamples(int[] sample, String word) {
        int i = 0;
        if (sample[0] != 0) {
            one_one.setText(Character.toString(word.charAt(i)));
            one_one.setBackground(new Color(151, 212, 230));
            i += 1;
        }
        if (sample[1] != 0) {
            one_two.setText(Character.toString(word.charAt(i)));
            one_two.setBackground(new Color(151, 212, 230));
            i += 1;
        }
        if (sample[2] != 0) {
            one_three.setText(Character.toString(word.charAt(i)));
            one_three.setBackground(new Color(151, 212, 230));
            i += 1;
        }
        if (sample[3] != 0) {
            one_four.setText(Character.toString(word.charAt(i)));
            one_four.setBackground(new Color(151, 212, 230));
            i += 1;
        }
        if (sample[4] != 0) {
            two_one.setText(Character.toString(word.charAt(i)));
            two_one.setBackground(new Color(151, 212, 230));
            i += 1;
        }
        if (sample[5] != 0) {
            two_two.setText(Character.toString(word.charAt(i)));
            two_two.setBackground(new Color(151, 212, 230));
            i += 1;
        }
        if (sample[6] != 0) {
            two_three.setText(Character.toString(word.charAt(i)));
            two_three.setBackground(new Color(151, 212, 230));
            i += 1;
        }
        if (sample[7] != 0) {
            two_four.setText(Character.toString(word.charAt(i)));
            two_four.setBackground(new Color(151, 212, 230));
            i += 1;
        }
        if (sample[8] != 0) {
            three_one.setText(Character.toString(word.charAt(i)));
            three_one.setBackground(new Color(151, 212, 230));
            i += 1;
        }
        if (sample[9] != 0) {
            three_two.setText(Character.toString(word.charAt(i)));
            three_two.setBackground(new Color(151, 212, 230));
            i += 1;
        }
        if (sample[10] != 0) {
            three_three.setText(Character.toString(word.charAt(i)));
            three_three.setBackground(new Color(151, 212, 230));
            i += 1;
        }
        if (sample[11] != 0) {
            three_four.setText(Character.toString(word.charAt(i)));
            three_four.setBackground(new Color(151, 212, 230));
            i += 1;
        }
        if (sample[12] != 0) {
            four_one.setText(Character.toString(word.charAt(i)));
            four_one.setBackground(new Color(151, 212, 230));
        }
        if (sample[13] != 0) {
            four_two.setText(Character.toString(word.charAt(i)));
            four_two.setBackground(new Color(151, 212, 230));
            i += 1;
        }
        if (sample[14] != 0) {
            four_three.setText(Character.toString(word.charAt(i)));
            four_three.setBackground(new Color(151, 212, 230));
            i += 1;
        }
        if (sample[15] != 0) {
            i += 1;
            four_four.setText(Character.toString(word.charAt(i)));
            four_four.setBackground(new Color(151, 212, 230));
        }
    }

    //Conver String to StringBuilder
    public StringBuilder string2SB(String str) {
        // Creating StringBuilder object
        StringBuilder sb = new StringBuilder();
        // Using append() method to convert String to StringBuilder
        sb.append(str);

        return sb;
    }
}
